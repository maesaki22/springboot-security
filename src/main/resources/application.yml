server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: cos
    password: 6214
      
  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    
  security:
    oauth2: 
      client:
        registration:
          google:
            client-id: 832800115687-ob1n0k5ms2d1tq2a6o2do0frr9s88hsp.apps.googleusercontent.com
            client-secret: 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
            scope:
            - email
            - profile
          facebook:
            client-id: 잠시
            client-secret: 보류
            scope:
            - email
            - public_profile
            
            
          naver:
            client-id: S_3VzjnCI7pHp3pNymQ3
            client-secret: VaJt5DpPnh
            scope:
            - name
            - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver # google facebook 은 springboot에서 이미 자동제공한다. naver는 등록
            
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 받아서 response의 key을 json으로                  